#!/usr/bin/env python3
import argparse
import os
import sys

from pathlib import Path

import yaml

from jinja2 import Environment, FileSystemLoader


yaml.warnings({'YAMLLoadWarning': False})


def get_parsed_args(argv):
    """Create argument parser and return cli args.
    """
    parser = argparse.ArgumentParser(
        description="Create SLURM Config"
    )
    parser.add_argument(
        "-t",
        "--node-type",
        type=str,
        dest="slurm_node_type",
        choices=['slurmdbd','slurmctld','slurmd','login'],
        required=True,
        help="Slurm node type."
    )
    return parser.parse_args(argv)


def render_slurm_conf(ctxt: 'dict'=None):

    if not ctxt:
        ctxt = {}

    templates_path = os.path.join(os.getenv('SNAP'), 'etc', 'slurm-configurator')
    env = Environment(loader=FileSystemLoader(templates_path))
    return env.get_template('slurm.conf.tmpl').render(ctxt=ctxt)


def main(argv=sys.argv[1:]):
    args = get_parsed_args(argv)

    slurm_configurator_base = Path(
        f"{os.environ['SNAP_COMMON']}/etc/slurm-configurator"
    )

    if args.slurm_node_type == "slurmdbd":
        config_types = [
            f'{ args.slurm_node_type}_auth',
            f'{ args.slurm_node_type}_host',
            f'{ args.slurm_node_type}_storage',
            f'{ args.slurm_node_type}_general',
        ]

    elif args.slurm_node_type == "slurmctld":
        config_types = [
            f'{ args.slurm_node_type}_auth',
            f'{ args.slurm_node_type}_host',
            f'{ args.slurm_node_type}_general',
        ]

    elif args.slurm_node_type == "slurmd":
        config_types = [
            f'{ args.slurm_node_type}_auth',
            f'{ args.slurm_node_type}_host',
            f'{ args.slurm_node_type}_general',
        ]

    elif args.slurm_node_type == "login":
        config_types = [
            f'{ args.slurm_node_type}_auth',
            f'{ args.slurm_node_type}_host',
            f'{ args.slurm_node_type}_general',
        ]   
    else:
        print("Unknown node type")
        sys.exit(1)

    ctxt = {}
    for config_type in config_types:
        f = (slurm_configurator_base / f'{config_type}.yaml')
        for k, v in yaml.load(f.read_text()).items():
            ctxt[k] = v

    print(render_slurm_conf(ctxt=ctxt))


if __name__ == "__main__":
    main()
